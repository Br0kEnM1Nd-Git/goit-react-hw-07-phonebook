{"version":3,"file":"static/js/810.9cd691be.chunk.js","mappings":"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","sources":["components/PhonebookList/ContactsItem.jsx","components/PhonebookList/PhonebookList.jsx","webpack://react-homework-template/./src/components/PhonebookForm/PhonebookForm.module.scss?5840","components/PhonebookForm/PhonebookForm.jsx","components/PhonebookList/PhonebookFilter.jsx","pages/Home/index.jsx","store/selectors.js","webpack://react-homework-template/./src/components/PhonebookList/Phonebook.module.scss?2088"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'store/contactsSlice';\n\nconst ContactsItem = ({ contact: { id, name, phone } }) => {\n  const dispatch = useDispatch();\n  const deleteContact = () => dispatch(deleteContactThunk(id));\n\n  return (\n    <li>\n      <span>\n        {name}: {phone}\n      </span>\n      <button onClick={deleteContact}>Delete</button>\n    </li>\n  );\n};\n\nexport default ContactsItem;\n","import { useSelector } from 'react-redux';\nimport ContactsItem from './ContactsItem';\nimport {\n  selectErrorContacts,\n  selectIsLoadingContacts,\n  selectVisibleContacts,\n} from 'store/selectors';\nimport styles from './Phonebook.module.scss';\n\nexport const PhonebookList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoadingContacts);\n  const error = useSelector(selectErrorContacts);\n\n  return (\n    <div className={styles.contactsList}>\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p>{error}</p>\n      ) : (\n        visibleContacts.map(contact => {\n          return <ContactsItem contact={contact} key={contact.id} />;\n        })\n      )}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsForm\":\"PhonebookForm_contactsForm__1hcL0\"};","import { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { selectContacts } from 'store/selectors';\nimport { addContactThunk } from 'store/contactsSlice';\nimport styles from './PhonebookForm.module.scss';\n\nconst PhonebookForm = () => {\n  const { contacts } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const createContact = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.name.value;\n    const phone = form.number.value;\n\n    const isNew = contacts.every(el => {\n      if (el.name.toLowerCase() === name.toLowerCase()) return false;\n      if (el.phone === phone) return false;\n      return true;\n    });\n\n    const isNumber = Number(phone);\n    if (!isNumber) return Notiflix.Notify.warning(`${phone} is not a number!`);\n\n    form.reset();\n\n    if (!isNew)\n      return Notiflix.Notify.warning(`${name} is already in contacts!`);\n\n    const newContact = {\n      name,\n      phone,\n    };\n\n    dispatch(addContactThunk(newContact));\n  };\n\n  return (\n    <form className={styles.contactsForm} onSubmit={createContact}>\n      <label htmlFor=\"name\">Name</label>\n      <input type=\"text\" name=\"name\" id=\"name\" required autoComplete=\"name\" />\n      <label htmlFor=\"number\">Number</label>\n      <input type=\"tel\" name=\"number\" id=\"number\" required autoComplete=\"tel\" />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nexport default PhonebookForm;\n","import { useDispatch } from 'react-redux';\nimport debounce from 'lodash.debounce';\nimport { changeFilterAction } from 'store/filterSlice';\nimport styles from './Phonebook.module.scss'\n\nconst PhonebookFilter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const value = e.target.value;\n    dispatch(changeFilterAction(value));\n  };\n\n  return (\n    <form className={styles.filterForm}>\n      <label htmlFor=\"filter\">Find contacts:</label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        id=\"filter\"\n        onChange={debounce(e => handleChange(e), 200)}\n        autoComplete=\"off\"\n      />\n    </form>\n  );\n};\n\nexport default PhonebookFilter;\n","import PhonebookForm from 'components/PhonebookForm/PhonebookForm';\nimport PhonebookFilter from 'components/PhonebookList/PhonebookFilter';\nimport { PhonebookList } from 'components/PhonebookList/PhonebookList';\n\nconst Home = () => {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <PhonebookForm />\n      <h2>Contacts</h2>\n      <PhonebookFilter />\n      <PhonebookList />\n    </>\n  );\n};\n\nexport default Home;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectFilter = state => state.filter;\n\nconst selectContacts = state => state.contacts;\n\nconst selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  ({ contacts }, filter) =>\n    contacts.filter(({ name, phone }) => {\n      if (filter) {\n        return (\n          name.toLowerCase().includes(filter.toLowerCase()) ||\n          phone.includes(filter)\n        );\n      }\n      return true;\n    })\n);\n\nconst selectIsLoadingContacts = state => state.contacts.isLoading;\n\nconst selectErrorContacts = state => state.contacts.error;\n\nexport {\n  selectFilter,\n  selectContacts,\n  selectVisibleContacts,\n  selectErrorContacts,\n  selectIsLoadingContacts,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterForm\":\"Phonebook_filterForm__X+vXc\",\"contactsList\":\"Phonebook_contactsList__CiGrI\"};"],"names":["_ref","contact","id","name","phone","dispatch","useDispatch","_jsxs","children","_jsx","onClick","deleteContact","deleteContactThunk","PhonebookList","visibleContacts","useSelector","selectVisibleContacts","isLoading","selectIsLoadingContacts","error","selectErrorContacts","className","styles","map","ContactsItem","PhonebookForm","contacts","selectContacts","onSubmit","e","preventDefault","form","target","value","number","isNew","every","el","toLowerCase","Number","Notiflix","concat","reset","newContact","addContactThunk","htmlFor","type","required","autoComplete","PhonebookFilter","onChange","debounce","changeFilterAction","handleChange","Home","_Fragment","state","createSelector","filter","_ref2","includes"],"sourceRoot":""}